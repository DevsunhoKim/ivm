h1 {
	text-align: center;
	font-size: 50px;
	font-weight: 700;
	color: #1E90FF;
  }
  
  table {
	margin: 20px auto;
	border-collapse: collapse;
  }
  
  th,
  td {
	padding: 10px;
	border: 2px solid black;
	text-align: center;
  }
  
  th {
	background-color: darkgray;
  }
  
  form {
	margin: 20px auto;
	width: 50%;
	display: flex;
	flex-direction: column;
	align-items: center;
  }
  
  label {
	margin: 10px 0;
	
  }
  
  input {
	
	margin-left: 10px;
	border: 2px solid #1E90FF;
	border-radius: 5px;
	padding: 5px;
  }
  
  button {
	margin-top: 10px;
	background-color: #0F52BA;
	color: white;
	border: none;
	border-radius: 5px;
	padding: 10px;
	cursor: pointer;
	
  }
  
  button:hover {
	background-color: #4169E1;
  }
  
/* 다크모드 테마 */
body.dark-mode {
	background-color: #222;
	color: #fff;
	
  }
  
  /* 다크모드 버튼 */
  .dark-mode-btn {
	position: fixed;
	top: 20px;
	right: 20px;
	background-color: #0F52BA;
	color: white;
	border: none;
	border-radius: 5px;
	padding: 10px;
	cursor: pointer;
  }
  
 #item-search input {
	
	margin-left: 10px;
	border: 2px solid #1E90FF;
	border-radius: 5px;
	padding: 5px;
  }

/* 검색창 재대로 구현 
각 html 요소 자리 배치 필요
아이콘 이미지화
다크 모드 개별 css 설정 
검색창 ui 설정
데이터 테이블 디자인 변경

전처리기 사용: Sass 또는 Less와 같은 CSS 전처리기는 변수, 중첩 및 혼합과 같은 기능을 제공하여 CSS 작성 및 관리를 보다 쉽고 효율적으로 만들 수 있습니다.
기능별로 스타일 구성: 유형이 아닌 기능 또는 모듈별로 스타일시트를 구성합니다(예: 모든 버튼 스타일 함께). 이렇게 하면 프로그램의 특정 구성 요소 또는 섹션에 대한 스타일을 쉽게 찾고 업데이트할 수 있습니다.
명명 규칙 사용: BEM 또는 SMACSS와 같은 명명 규칙을 사용하여 각 스타일의 목적과 컨텍스트를 전달하는 데 도움이 되는 일관되고 설명적인 클래스 이름을 만듭니다.
스타일을 단순하고 재사용 가능하게 유지: 지나치게 구체적이거나 복잡한 선택자를 피하고 프로그램 전체에서 재사용할 수 있는 공통 스타일에 유틸리티 클래스 또는 믹스인을 사용하여 스타일을 단순하고 재사용 가능하게 유지합니다.
재설정 또는 정규화 스타일시트 사용: 재설정 또는 정규화 스타일시트를 사용하여 다양한 브라우저 및 장치에서 일관된 스타일을 지정합니다.
스타일 중복 최소화: 유사한 스타일을 여러 위치에서 반복하는 대신 공유 클래스 또는 믹스인으로 통합하여 스타일 중복을 최소화합니다.
주석 사용: 주석을 사용하여 스타일의 목적과 컨텍스트를 문서화하고 다른 사람들이 코드를 이해하고 유지 관리하도록 돕습니다.
