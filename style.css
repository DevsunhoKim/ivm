h1 {
	text-align: center;
	font-size: 50px;
	font-weight: 700;
	color: #1E90FF;
  }
  
  table {
	margin: 20px auto;
	border-collapse: collapse;
  }
  
  th,
  td {
	padding: 10px;
	border: 2px solid black;
	text-align: center;
  }
  
  th {
	background-color: darkgray;
  }
  
  form {
	margin: 20px auto;
	width: 50%;
	display: flex;
	flex-direction: column;
	align-items: center;
  }
  
  label {
	margin: 10px 0;
	
  }
  
  input {
	
	margin-left: 10px;
	border: 2px solid #1E90FF;
	border-radius: 5px;
	padding: 5px;
  }
  
  button {
	margin-top: 10px;
	background-color: #0F52BA;
	color: white;
	border: none;
	border-radius: 5px;
	padding: 10px;
	cursor: pointer;
	
  }
  
  button:hover {
	background-color: #4169E1;
  }
  
/* 다크모드 테마 */
body.dark-mode {
	background-color: #222;
	color: #fff;
	
  }
  
  /* 다크모드 버튼 */
  .dark-mode-btn {
	position: fixed;
	top: 20px;
	right: 20px;
	background-color: #0F52BA;
	color: white;
	border: none;
	border-radius: 5px;
	padding: 10px;
	cursor: pointer;
  }
  
 #item-search input {
	
	margin-left: 10px;
	border: 2px solid #1E90FF;
	border-radius: 5px;
	padding: 5px;
  }

/* 검색창 재대로 구현 
각 html 요소 자리 배치 필요
아이콘 이미지화
다크 모드 개별 css 설정 
검색창 ui 설정
데이터 테이블 디자인 변경

전처리기 사용: Sass 또는 Less와 같은 CSS 전처리기는 변수, 중첩 및 혼합과 같은 기능을 제공하여 CSS 작성 및 관리를 보다 쉽고 효율적으로 만들 수 있습니다.
기능별로 스타일 구성: 유형이 아닌 기능 또는 모듈별로 스타일시트를 구성합니다(예: 모든 버튼 스타일 함께). 이렇게 하면 프로그램의 특정 구성 요소 또는 섹션에 대한 스타일을 쉽게 찾고 업데이트할 수 있습니다.
명명 규칙 사용: BEM 또는 SMACSS와 같은 명명 규칙을 사용하여 각 스타일의 목적과 컨텍스트를 전달하는 데 도움이 되는 일관되고 설명적인 클래스 이름을 만듭니다.
스타일을 단순하고 재사용 가능하게 유지: 지나치게 구체적이거나 복잡한 선택자를 피하고 프로그램 전체에서 재사용할 수 있는 공통 스타일에 유틸리티 클래스 또는 믹스인을 사용하여 스타일을 단순하고 재사용 가능하게 유지합니다.
재설정 또는 정규화 스타일시트 사용: 재설정 또는 정규화 스타일시트를 사용하여 다양한 브라우저 및 장치에서 일관된 스타일을 지정합니다.
스타일 중복 최소화: 유사한 스타일을 여러 위치에서 반복하는 대신 공유 클래스 또는 믹스인으로 통합하여 스타일 중복을 최소화합니다.
주석 사용: 주석을 사용하여 스타일의 목적과 컨텍스트를 문서화하고 다른 사람들이 코드를 이해하고 유지 관리하도록 돕습니다.

/*DBMS(데이터베이스 관리 시스템)에 대한 접근 권한을 설정하려면 다음 단계를 따라야 합니다.


사용자 역할 식별: 액세스 권한을 부여하기 전에 데이터베이스에 액세스할 사용자의 역할과 책임을 식별하는 것이 중요합니다. 여기에는 개발자, 관리자 및 최종 사용자가 포함될 수 있습니다.
액세스 수준 정의: 사용자 역할을 식별한 후에는 각 사용자가 데이터베이스에 대해 가져야 하는 액세스 수준을 정의해야 합니다. 예를 들어 개발자에게는 데이터베이스에 대한 전체 액세스 권한이 필요한 반면 최종 사용자에게는 읽기 전용 액세스 권한만 필요할 수 있습니다.
사용자 계정 만들기: 데이터베이스에 액세스할 각 사용자의 사용자 계정을 만들어야 합니다. 여기에는 일반적으로 사용자 이름과 암호는 물론 이메일 주소와 같은 기타 관련 정보를 지정하는 작업이 포함됩니다.
액세스 권한 할당: 사용자 계정이 생성되면 사용자의 역할과 필요한 액세스 수준에 따라 액세스 권한을 할당할 수 있습니다. 여기에는 일부 테이블에 대한 읽기 전용 액세스 권한 부여 또는 데이터베이스의 특정 영역에 대한 액세스 제한이 포함될 수 있습니다.
액세스 테스트: 사용자에게 액세스 권한을 부여하기 전에 액세스 권한이 올바르게 설정되었는지 테스트하는 것이 중요합니다. 여기에는 각 사용자로 로그인하고 데이터베이스에 대한 액세스 수준을 테스트하는 작업이 포함될 수 있습니다.
액세스 모니터링 및 업데이트: 액세스 권한이 각 사용자의 역할과 책임에 여전히 적절한지 확인하기 위해 정기적으로 모니터링해야 합니다. 조직의 요구 사항이 변경되면 액세스 권한을 업데이트하거나 취소해야 할 수 있습니다.

다음 단계에 따라 DBMS에 대한 액세스 권한을 설정하고 사용자가 자신의 역할을 효과적으로 수행하는 데 필요한 데이터에만 액세스하도록 할 수 있습니다. 이를 통해 무단 액세스를 방지하고 데이터 무결성을 유지하며 중요한 정보를 보호할 수 있습니다. */